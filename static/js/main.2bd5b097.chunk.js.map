{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["currentTodoReducer","state","action","type","payload","initialFilterState","query","selectedStatus","filterReducer","toggleLoading","isLoading","initialState","todos","loading","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","onTodoChose","length","className","map","todo","id","completed","classNames","title","onClick","TodoFilter","onQueryChange","onStatusChange","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","onTodoClose","useState","user","setUser","setLoading","useEffect","userId","currentUser","finally","href","email","name","useAppDispatch","useDispatch","useAppSelector","useSelector","App","dispatch","data","newQuery","setQuery","status","setSelectedStatus","allTodos","filteredTodos","normalisedQuery","toLowerCase","trim","includes","getFilteredTodos","setTodo","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2bd5b097.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nexport const removeTodo = (): RemoveTodoAction => (\n  { type: 'currentTodo/REMOVE' }\n);\n\nexport const setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (state: State = null, action: Action): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ninterface SetQueryAction {\n  type: 'SET_QUERY';\n  payload: string;\n}\n\ninterface SetSelectedStatusAction {\n  type: 'SET_SELECTED_STATUS';\n  payload: Status;\n}\n\nexport type FilterAction = SetQueryAction | SetSelectedStatusAction;\n\nexport const setQuery = (query: string): SetQueryAction => ({\n  type: 'SET_QUERY',\n  payload: query,\n});\n\nexport const setSelectedStatus = (status: Status): SetSelectedStatusAction => ({\n  type: 'SET_SELECTED_STATUS',\n  payload: status,\n});\n\ninterface FilterState {\n  query: string,\n  selectedStatus: Status,\n}\n\nconst initialFilterState: FilterState = {\n  query: '',\n  selectedStatus: 'all',\n};\n\nconst filterReducer = (state = initialFilterState, action: FilterAction) => {\n  switch (action.type) {\n    case 'SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'SET_SELECTED_STATUS':\n      return {\n        ...state,\n        selectedStatus: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ninterface SetTodosAction {\n  type: 'SET_TODOS';\n  payload: Todo[];\n}\n\ninterface ToggleLoadingAction {\n  type: 'TOGGLE_LOADING';\n  payload: boolean;\n}\n\nexport const setTodos = (todos: Todo[]) => ({\n  type: 'SET_TODOS',\n  payload: todos,\n});\n\nexport const toggleLoading = (isLoading: boolean): ToggleLoadingAction => ({\n  type: 'TOGGLE_LOADING',\n  payload: isLoading,\n});\n\ninterface StateOfTodos {\n  todos: Todo[];\n  loading: boolean;\n}\n\nconst initialState: StateOfTodos = {\n  todos: [],\n  loading: false,\n};\n\nexport type TodosAction = SetTodosAction | ToggleLoadingAction;\n\nconst todosReducer = (state = initialState, action: TodosAction) => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case 'TOGGLE_LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  currentTodo: Todo | null,\n  onTodoChose: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, currentTodo, onTodoChose }) => {\n  return (\n    <>\n      {todos.length === 0\n        && (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {todos.map(todo => (\n            <tr data-cy=\"todo\" key={todo.id}>\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed\n                  && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames(\n                  { 'has-text-danger': !todo.completed },\n                )}\n                >\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onTodoChose(todo)}\n                >\n                  <span className=\"icon\">\n                    {currentTodo?.id === todo.id\n                      ? <i className=\"far fa-eye-slash\" />\n                      : <i className=\"far fa-eye\" />}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\n\ntype Props = {\n  query: string,\n  onQueryChange: (query: string) => void,\n  onStatusChange: (status: Status) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onQueryChange,\n  onStatusChange,\n}) => {\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              onStatusChange(event.target.value as Status);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query !== ''\n            && (\n              <button\n                aria-label=\"Clear query\"\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => onQueryChange('')}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then((res) => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  currentTodo: Todo,\n  onTodoClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo, onTodoClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUser(currentTodo?.userId)\n      .then(currentUser => setUser(currentUser))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading && <Loader />}\n\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <div\n            className=\"modal-card-title has-text-weight-medium\"\n            data-cy=\"modal-header\"\n          >\n            {`Todo #${currentTodo?.id}`}\n          </div>\n\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            type=\"button\"\n            className=\"delete\"\n            data-cy=\"modal-close\"\n            onClick={onTodoClose}\n          />\n        </header>\n\n        <div className=\"modal-card-body\">\n          <p className=\"block\" data-cy=\"modal-title\">\n            {currentTodo?.title}\n          </p>\n\n          <p className=\"block\" data-cy=\"modal-user\">\n            {currentTodo?.completed\n              ? <strong className=\"has-text-success\">Done</strong>\n              : <strong className=\"has-text-danger\">Planned</strong>}\n            {' by '}\n            <a href={`mailto:${user?.email}`}>{user?.name}</a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { toggleLoading } from './features/todos';\nimport { setQuery, setSelectedStatus } from './features/filter';\nimport { Status } from './types/Status';\nimport { Todo } from './types/Todo';\nimport { removeTodo, setTodo } from './features/currentTodo';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { todos, loading } = useAppSelector((state) => state.todos);\n  const { query, selectedStatus } = useAppSelector((state) => state.filter);\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  useEffect(() => {\n    dispatch(toggleLoading(true));\n\n    getTodos()\n      .then(data => {\n        dispatch({ type: 'SET_TODOS', payload: data });\n      })\n      .finally(() => dispatch(toggleLoading(false)));\n  }, [dispatch]);\n\n  const handleQueryChange = (newQuery: string) => {\n    dispatch(setQuery(newQuery));\n  };\n\n  const handleStatusChange = (status: Status) => {\n    dispatch(setSelectedStatus(status));\n  };\n\n  const getFilteredTodos = (allTodos: Todo[]) => {\n    let filteredTodos = [...allTodos];\n    const normalisedQuery = query.toLowerCase().trim();\n\n    if (normalisedQuery) {\n      filteredTodos = filteredTodos.filter(\n        todo => todo.title.toLowerCase().includes(normalisedQuery),\n      );\n    }\n\n    switch (selectedStatus) {\n      case 'active':\n        return filteredTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return filteredTodos.filter(todo => todo.completed);\n\n      default:\n        return filteredTodos;\n    }\n  };\n\n  const setCurrentTodo = (todo: Todo) => {\n    return dispatch(setTodo(todo));\n  };\n\n  const removeCurrentTodo = () => {\n    return dispatch(removeTodo());\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={handleQueryChange}\n                onStatusChange={handleStatusChange}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n              <TodoList\n                todos={getFilteredTodos(todos)}\n                currentTodo={currentTodo}\n                onTodoChose={setCurrentTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo\n        && (\n          <TodoModal\n            currentTodo={currentTodo}\n            onTodoClose={removeCurrentTodo}\n          />\n        )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}